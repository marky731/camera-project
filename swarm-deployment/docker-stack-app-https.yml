version: '3.8'

services:
  # =============================================================================
  # Panel System Services (Updated for HTTPS proxy)
  # =============================================================================

  # Panel API Backend (.NET)
  panel-api:
    image: camera-panel-api:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      # Use Docker DNS for all internal services
      - ConnectionStrings__DefaultConnection=Host=panel-database;Database=CameraPanelDB;Username=postgres;Password=${DB_PASSWORD}
      - ConnectionStrings__PublicDatabase=Host=recording-jobs-db;Database=cloudcam_public;Username=cloudcam;Password=${PUBLIC_DB_PASSWORD}
      - RECORDER_SCHEDULER_URL=http://recorder-scheduler:8080
      - INTERNAL_API_KEY=${INTERNAL_API_KEY}
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
    # Remove external port mapping - nginx proxy will handle it
    networks:
      - camera-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      placement:
        constraints:
          - node.role == manager

  # Panel Frontend (React) - Updated for HTTPS
  panel-frontend:
    image: camera-panel-frontend:latest
    environment:
      # Update to use HTTPS URLs via proxy
      - REACT_APP_API_URL=https://${DOMAIN_NAME:-172.17.12.97}/api
      - REACT_APP_STREAMING_URL=https://${DOMAIN_NAME:-172.17.12.97}/stream
    # Remove external port mapping - nginx proxy will handle it
    networks:
      - camera-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager

  # Streaming Service (.NET)
  streaming-service:
    image: camera-streaming-service:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      # Use Docker DNS for backend-to-backend communication
      - PanelApi__BaseUrl=http://panel-api:8080
      - INTERNAL_API_KEY=${INTERNAL_API_KEY}
    # Remove external port mapping - nginx proxy will handle it
    networks:
      - camera-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 5
      placement:
        constraints:
          - node.role == manager

  # =============================================================================
  # Camera-v2 Video Processing Services
  # =============================================================================

  # RecorderScheduler (.NET) - Job orchestration
  recorder-scheduler:
    image: camera-recorder-scheduler:latest
    ports:
      - target: 8080
        published: 8081
        protocol: tcp
        mode: host
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      # Use Docker DNS for all database connections
      ConnectionStrings__DefaultConnection: "Host=recording-jobs-db;Database=cloudcam_public;Username=cloudcam;Password=${PUBLIC_DB_PASSWORD}"
      ConnectionStrings__PrivateConnection: "Host=recorder-scheduler-db;Database=recorder_scheduler;Username=dev;Password=${POSTGRES_PASSWORD}"
      Docker__Endpoint: "unix:///var/run/docker.sock"
      # RabbitMQ with host networking requires IP
      RabbitMQ__Host: "172.17.12.97"
      RabbitMQ__Port: "5672"
      RabbitMQ__Username: "dev"
      RabbitMQ__Password: "${RABBITMQ_PASSWORD}"
      RabbitMQ__VirtualHost: "cloudcam"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - camera-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager  # Must stay on manager for Docker socket
      restart_policy:
        condition: on-failure

  # Recorder (.NET) - FFmpeg video capture
  recorder:
    image: camera-recorder:latest
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      # RabbitMQ with host networking requires IP
      RabbitMQ__Host: "172.17.12.97"
      RabbitMQ__Port: "5672"
      RabbitMQ__Username: "dev"
      RabbitMQ__Password: "${RABBITMQ_PASSWORD}"
      RabbitMQ__VirtualHost: "cloudcam"
      Recorder__DataPath: "/data"
      Recorder__FFmpegPath: "ffmpeg"
      # Override SQLite database location to local storage
      ConnectionStrings__DefaultConnection: "Data Source=/app/local/recorder.db"
      Database__ConnectionString: "Data Source=/app/local/recorder.db"
    volumes:
      # NFS mount for video segments (shared across nodes)
      - /mnt/NBNAS/cameraswarm:/data
      # Local volume for SQLite database (per-node)
      - recorder_local:/app/local
    networks:
      - camera-network
    deploy:
      replicas: 2  # Can scale across nodes
      restart_policy:
        condition: on-failure
      placement:
        preferences:
          - spread: node.labels.role

  # S3Uploader (.NET) - Upload to cloud storage
  s3-uploader:
    image: camera-s3-uploader:latest
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      S3__Endpoint: "${S3_ENDPOINT}"
      S3__BucketName: "${S3_BUCKET_NAME}"
      S3__AccessKey: "${S3_ACCESS_KEY}"
      S3__SecretKey: "${S3_SECRET_KEY}"
      S3__UseSSL: "${S3_USE_SSL}"
      # RabbitMQ with host networking requires IP
      RabbitMQ__Host: "172.17.12.97"
      RabbitMQ__Port: "5672"
      RabbitMQ__Username: "dev"
      RabbitMQ__Password: "${RABBITMQ_PASSWORD}"
      RabbitMQ__VirtualHost: "cloudcam"
      S3Uploader__DataPath: "/data"
      S3Uploader__MaxConcurrentUploads: "5"
      S3Uploader__UploadTimeoutSeconds: "300"
    volumes:
      - /mnt/NBNAS/cameraswarm:/data:ro
    networks:
      - camera-network
    extra_hosts:
      - "nbpublic.narbulut.com:176.53.46.124"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    deploy:
      replicas: 2  # Can scale across nodes
      restart_policy:
        condition: on-failure
      placement:
        preferences:
          - spread: node.labels.role

  # PlaylistManager (.NET) - HLS catalog management
  playlist-manager:
    image: camera-playlist-manager:latest
    ports:
      - target: 8082
        published: 8082
        protocol: tcp
        mode: host
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      # Use Docker DNS for database
      ConnectionStrings__DefaultConnection: "Host=playlist-manager-db;Database=playlist_manager;Username=dev;Password=${POSTGRES_PASSWORD}"
      # RabbitMQ with host networking requires IP
      RabbitMQ__Host: "172.17.12.97"
      RabbitMQ__Port: "5672"
      RabbitMQ__Username: "dev"
      RabbitMQ__Password: "${RABBITMQ_PASSWORD}"
      RabbitMQ__VirtualHost: "cloudcam"
      PlaylistManager__S3BucketName: "${S3_BUCKET_NAME}"
      PlaylistManager__CDNBaseUrl: "${CDN_BASE_URL}"
      PlaylistManager__SignedUrlExpirationMinutes: "${SIGNED_URL_EXPIRATION_MINUTES}"
      PlaylistManager__S3Endpoint: "${S3_ENDPOINT}"
      PlaylistManager__S3AccessKey: "${S3_ACCESS_KEY}"
      PlaylistManager__S3SecretKey: "${S3_SECRET_KEY}"
      PlaylistManager__S3UseSSL: "${S3_USE_SSL}"
    volumes:
      - /mnt/NBNAS/cameraswarm:/data:ro
    networks:
      - camera-network
    extra_hosts:
      - "nbpublic.narbulut.com:176.53.46.124"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager  # Pin for consistent external access
      restart_policy:
        condition: on-failure

  # Player API (.NET) - Video playback REST API
  player-api:
    image: camera-player-api:latest
    # Remove external port mapping - nginx proxy will handle it
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      # Use Docker DNS for internal service communication
      PlaylistManager__BaseUrl: "http://playlist-manager:8082"
      PlaylistManager__ExternalBaseUrl: "https://${DOMAIN_NAME:-cam.narbulut.com}/playlist"
    networks:
      - camera-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager

  # Player Frontend (React/Vite) - Video player interface (Updated for HTTPS)
  player-frontend:
    image: camera-player-frontend:latest
    ports:
      - target: 3001
        published: 3001
        protocol: tcp
        mode: host
    environment:
      # Browser needs HTTPS URL where API is accessible via proxy
      VITE_API_BASE_URL: "https://${DOMAIN_NAME:-cam.narbulut.com}/player-api"
    networks:
      - camera-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager  # Pin for consistent iframe access
      restart_policy:
        condition: on-failure

# =============================================================================
# Networks
# =============================================================================
networks:
  camera-network:
    external: true

# =============================================================================
# Volumes
# =============================================================================
volumes:
  # Local volume for Recorder SQLite databases (per-node)
  recorder_local:
    driver: local